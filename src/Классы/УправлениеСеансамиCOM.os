#Использовать logos

Перем Лог;
Перем мНастройки;
Перем мСоединениеСКластером;

Процедура УстановитьНастройки(НастройкиКоманды) Экспорт
    мНастройки = НастройкиКоманды;
КонецПроцедуры

Процедура УстановитьСтатусБлокировкиСеансов(Знач Блокировать, Знач ВремяБлокировки) Экспорт
	
	Дескриптор = ПолучитьСоединениеСКластером();
	Попытка
        Попытка
            Если Блокировать Тогда
                Дескриптор.InfoBase.ConnectDenied = Истина;
                Дескриптор.InfoBase.DeniedMessage = мНастройки.СообщениеОблокировке;
                Дескриптор.InfoBase.PermissionCode = мНастройки.КлючРазрешенияЗапуска;
                Дескриптор.InfoBase.DeniedTo   = '01000101';
                Дескриптор.InfoBase.DeniedFrom = '01000101';
            Иначе
                Дескриптор.InfoBase.ConnectDenied = Ложь;
                Дескриптор.InfoBase.DeniedMessage = "";
                Дескриптор.InfoBase.PermissionCode = "";
                Дескриптор.InfoBase.DeniedTo   = '01000101';
                Дескриптор.InfoBase.DeniedFrom = '01000101';
            КонецЕсли;

        Исключение
            ТекстОшибки = ИнформацияОбОшибке().Описание;
            СообщениеСборки("Не удалось заблокировать подключения: Возможно, неверны логин/пароль администратора ИБ <" + ТекстОшибки + ">");
            
            ВызватьИсключение;
        КонецПопытки;

        Дескриптор.ConnectToWorkProcess.UpdateInfoBase(Дескриптор.InfoBase);
	Исключение
        ЗакрытьДескриптор(Дескриптор);
        ВызватьИсключение;
    КонецПопытки;

	Лог.Информация("Сеансы " + ?(Блокировать, "запрещены", "разрешены"));
	
КонецПроцедуры

Функция ПолучитьСписокСеансов() Экспорт
	
	ТаблицаСеансов = Новый ТаблицаЗначений;
	ТаблицаСеансов.Колонки.Добавить("Идентификатор");
	ТаблицаСеансов.Колонки.Добавить("Приложение");
	ТаблицаСеансов.Колонки.Добавить("Пользователь");
	ТаблицаСеансов.Колонки.Добавить("НомерСеанса");
	
	
	
	Возврат ТаблицаСеансов;
	
КонецФункции

Процедура ОтключитьСеанс(Знач Сеанс) Экспорт

	
	
	Лог.Информация(СтрШаблон("Отключаю сеанс: %1 [%2] (%3)", Сеанс.НомерСеанса, Сеанс.Пользователь, Сеанс.Приложение));
	
	

КонецПроцедуры

Функция ПолучитьСписокРабочихПроцессов() Экспорт
	
		
	Лог.Информация("Получаю список рабочих процессов...");
	
	Возврат СписокПроцессов;
	
КонецФункции

Функция ПолучитьСоединенияРабочегоПроцесса(Знач РабочийПроцесс) Экспорт
	
	
				
	Лог.Информация("Получаю список соединений...");
	Возврат СписокСоединений;
	
КонецФункции

Функция РабочийПроцессВыполняется(Знач РабочийПроцесс) Экспорт
	Возврат РабочийПроцесс["running"] = "yes";
КонецФункции

Процедура РазорватьСоединениеСПроцессом(Знач РабочийПроцесс, Знач Соединение) Экспорт
	
	
	Сообщение = СтрШаблон("Отключаю соединение %1 [%2] (%3)",
					Соединение["conn-id"],
					Соединение["app-id"],
					Соединение["user-name"]);
					
	Лог.Информация(Сообщение);
	
	Возврат ЗапуститьПроцесс(КомандаРазрывСоединения);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция ПолучитьСоединениеСКластером()
	
	ПрефиксВерсии = Лев(мНастройки.ИспользуемаяВерсияПлатформы, 3);
    Если ПрефиксВерсии = "8.2" Тогда
        Соединение = "V82.ComConnector";
    Иначе
        Соединение = "V83.ComConnector";
    КонецЕсли;

	СообщениеСборки("Создание COM-коннектора <"+ Соединение + ">");
	
	Возврат Новый COMОбъект(Соединение);
	
КонецФункции

Функция НайтиКластерСерверов(Знач Clusters, Знач ИмяСервера)
	
	НашлиКластер = Ложь;
	Для i = 0 По Clusters.Количество()-1 Цикл
		Cluster = Clusters[i];
		Если ВРег(Cluster.HostName) + ":" + Cluster.MainPort = ВРег(ИмяСервера) Тогда
			НашлиКластер = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиКластер Тогда
		ОсвободитьОбъектКластера(Cluster);
		ВызватьИсключение "Ошибка - не нашли кластер <"+ИмяСервера+">";
	КонецЕсли;
	
	Возврат Cluster;
	
КонецФункции

Процедура ОсвободитьОбъектКластера(Соединение)
	
	Если Соединение <> Неопределено Тогда
		ОсвободитьОбъект(Соединение);
		Соединение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьДескриптор(Знач Дескриптор) Экспорт

	ОсвободитьОбъектКластера(Дескриптор.ConnectToWorkProcess);
	ОсвободитьОбъектКластера(Дескриптор.Cluster);
	ОсвободитьОбъектКластера(Дескриптор.ServerAgent);
	ОсвободитьОбъектКластера(Дескриптор.InfoBase);

КонецПроцедуры

Функция ПолучитьСоединениеСКластером()
    Если мСоединениеСКластером = Неопределено Тогда
        мСоединениеСКластером = ПолучитьСоединениеСКластером();
    КонецЕсли;

    Возврат мСоединениеСКластером;
КонецФункции // ПолучитьСоединениеСКластером()

Функция УстановитьСоединениеСКластером()

    ComConnector = ПолучитьСоединениеСКластером();

	Дескриптор = Новый Структура;
	Дескриптор.Вставить("ServerAgent", Неопределено);
	Дескриптор.Вставить("Cluster", Неопределено);
	Дескриптор.Вставить("ConnectToWorkProcess", Неопределено);
	Дескриптор.Вставить("InfoBase", Неопределено);

	Попытка
		
		Лог.Информация("Подключение к агенту сервера");
		ServerAgent = ComConnector.ConnectAgent(мНастройки.АдресАгентаСервера);
		Дескриптор.ServerAgent = ServerAgent;

		Clusters = ServerAgent.GetClusters();
		Cluster = НайтиКластерСерверов(Clusters, мНастройки.ИмяСервера);

		Лог.Информация("Аутентификация к найденному кластеру: " + Cluster.HostName + ":" + Cluster.MainPort);
		ServerAgent.Authenticate(Cluster, мНастройки.АдминистраторКластера, мНастройки.ПарольАдминистратораКластера);
		
		ConnectToWorkProcess = ПолучитьСоединениеСПроцессом(ComConnector, ServerAgent, Cluster);
		
		Дескриптор.Cluster = Cluster;
        Дескриптор.ConnectToWorkProcess = ConnectToWorkProcess;

		Если ConnectToWorkProcess <> Неопределено Тогда
			InfoBase = НайтиИнформационнуюБазуВРабочемПроцессе(ConnectToWorkProcess);
			Если Infobase = Неопределено Тогда
				ВызватьИсключение "Не нашли нужную ИБ";
			КонецЕсли;
			Дескриптор.InfoBase = InfoBase
		Иначе
			ВызватьИсключение "Нет запущенных рабочих процессов";
		КонецЕсли;
		
	Исключение

		ЗакрытьДескриптор(Дескриптор);
		ОсвободитьОбъектКластера(Clusters);
		ОсвободитьОбъектКластера(ComConnector);
		
		ВызватьИсключение;
		
	КонецПопытки;

	Возврат Дескриптор; 

КонецФункции

/////////////////////////////////////////////////////////////////////////////////
Лог = Логирование.ПолучитьЛог("vanessa.app.deployka");